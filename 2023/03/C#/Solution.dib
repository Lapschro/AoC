#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

using System.IO;
using System.Linq;

#!csharp

var input = (await File.ReadAllLinesAsync("input.txt")).Where(x => !string.IsNullOrWhiteSpace(x)).ToList();

#!csharp

input.Count

#!csharp

using System.Collections.Generic;

#!csharp

var res = 0;

for(int i = 0; i < input.Count; i++){
    var line = input[i];

    StringBuilder numberBuilder = new();
    bool validPart = false;

    for(int j = 0; j < line.Length; j++){
        if(line[j] >= '0' && line[j] <= '9'){
            numberBuilder.Append(line[j]);

            for(int k = i - 1; k <= i+1; k++){
                if(k < 0 || k >= line.Length){
                    continue;
                }

                for(int l = j - 1; l <= j+1; l++){
                    if(l < 0 || l >= line.Length){
                        continue;
                    }

                    if(k == i && l == j){
                        continue;
                    }

                    if("!@#$%^&*()/-+=".Contains(input[k][l])){
                        validPart = true;
                    }
                }
            }
        }else{
            if(numberBuilder.Length > 0){
                if(validPart){
                    res += int.Parse(numberBuilder.ToString());
                    validPart = false;
                }
                numberBuilder.Clear();
            }
        }
    }

            if(numberBuilder.Length > 0){
                if(validPart){
                    res += int.Parse(numberBuilder.ToString());
                    validPart = false;
                }
                numberBuilder.Clear();
            }
}
res

#!markdown

# Part 2

#!csharp

var res = 0;

Dictionary<(int,int), List<long>> gearedNumbers = new Dictionary<(int,int), List<long>>();

for(int i = 0; i < input.Count; i++){
var line = input[i];

    StringBuilder numberBuilder = new();
    HashSet<(int,int)> validParts = new();

    for(int j = 0; j < line.Length; j++){
        if(line[j] >= '0' && line[j] <= '9'){
            numberBuilder.Append(line[j]);

            for(int k = i - 1; k <= i+1; k++){
                if(k < 0 || k >= line.Length){
                    continue;
                }

                for(int l = j - 1; l <= j+1; l++){
                    if(l < 0 || l >= line.Length){
                        continue;
                    }

                    if(k == i && l == j){
                        continue;
                    }

                    if("*".Contains(input[k][l])){
                        validParts.Add((k,l));
                    }
                }
            }
        }else{
            if(numberBuilder.Length > 0){
                if(validParts.Count > 0){
                    foreach(var gear in validParts){
                        if(!gearedNumbers.ContainsKey(gear)){
                            gearedNumbers.Add(gear, new List<long>());
                        }
                        gearedNumbers[gear].Add(int.Parse(numberBuilder.ToString()));
                        
                    }
                }
            }
                    validParts.Clear();
                numberBuilder.Clear();
        }
    }

    
    if(numberBuilder.Length > 0){
        if(validParts.Count > 0){
            foreach(var gear in validParts){
                if(!gearedNumbers.ContainsKey(gear)){
                    gearedNumbers.Add(gear, new List<long>());
                }
                gearedNumbers[gear].Add(int.Parse(numberBuilder.ToString()));
                
            }
        }
    }
    validParts.Clear();
    numberBuilder.Clear();
        
}

gearedNumbers.Where(x => x.Value.Count > 1).Sum(x => x.Value.Aggregate((x, acc) => x*acc))

#!markdown

79859350
